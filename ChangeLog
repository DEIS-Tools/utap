2004-06-16  Gerd Behrmann  <behrmann@cs.auc.dk>
	* Split SystemBuilder into AbstractBuilder, ExpressionBuilder and 
	  SystemBuilder.
	* More work on parsing and type checking UCode.
	* Reimplemented xmlreader.cpp (now uses reader interface 
	  of libxml2 2.6)
	* C++ standard compliance
	* Added priorities to the language
	* Fixes in the Interpreter
	* Moved more type checking code from SystemBuilder to TypeChecker
	* Lots of bug fixes
	* Header files now use a .h ending and C++ files .cpp.
	* More...

2004-04-22  Gerd Behrmann  <behrmann@cs.auc.dk>
	* Removed decl_check debug code
	* Documentation updates
	* Renamed some ParserBuilder methods
	* Moved more things to the UTAP name space
	* Removed bogus computation of deadcode from SystemBuilder
	* Fixed some error handling productions in parser.yy
	* First steps to type checking functions
	* More updates in the error recovery rules of the parser
	* In TimedAutomataSystem, replaced 'current template' with 'current
	  declaration block', which can be a template or a statement block
	* Changed method names for StatementVisitor (using a verb)
	* Added CollectChangesVisitor for collecting which variables might
	  be changed by a functiono Added check for non-constant reference
  	  paramters to ::changesVariable and ::collectPossibleWrites	
	* Added error message for clock declarations inside functions
	* Made recursion on false-case of if statements conditional
	* Added type checking of expressions used inside functions
	* Added checks to make sure that only valid expressions are used in
	  functions
	* Moved some of the template specific checks out of 
	  checkParameterCompatible()
	* Added range_t::isEmpty()
	* Changed checkParameterCompatible() to also handle cases which would
	  not appear with templates, but could happen with functions
	* Implemented getSize for FUNCALL expressions
	* Added parameter checking for functions
	* Added some TODO information
	* Removed unused variable from RangeChecker
	* Reimplemented expresson_t::toString() to reduce the number of 
	  allocations
	* Fixed problem with evaluating an empty expression
	* Fixed problem in RangeChecker in determining the range of template
	  parameters without an explicit range
	* Added type_t::BOOL type to libutap (assignment to a bool variable is
	  not the same as assignment to a int[0,1] variable).
	* Updated internal builder to handle assignments to bool variables 
	  correctly 
	* Replaced call to strlcpy with a while loop (strlcpy does not exist
	  on Linux)
	* Added check to ::typeName method to ensure that the identifier 
	  is actually a type name (this is normally ensured by the parser
	  already, but as described in bug 41 there is a single situation
	  where this is actually not the case; anyway, the method should not 
	  assume that the caller always provides valid arguments).
	* Fixed bug in expression_t::equal
	* Fixed bug in TimedAutomataSystem::addVariable	
	* Added type check for expressions used in the type of a variable 
	  declaration.
	* Added example program (tracer) which reads UPPAAL trace files
	  (xtr files) and prints them to stdout.
	* Added collectPossibleWrites method to expression_t
	* In SystemBuilder::declFunEnd, used CollectChangesVisitor to 
	  initialise the changes attribute of the function_t structure
	  (which is used to determine whether a function has side effects).
        * Fixed bugs 32, 43, 46, 54, 58, 60, 82, 85, 88, 93, 97	
	
2003-06-24  Gerd Behrmann  <behrmann@cs.auc.dk>
	* Marked expression_t::collectAlwaysChangedSymbols() to const
	* Removed expression_t::collectAlwaysChanged... method

2003-06-22  Gerd Behrmann  <behrmann@cs.auc.dk>
	* Fixed build problem on windows
  	* Fixed problem with array arguments to template instantiation
  	* Added exression_t::collectAlwaysChangedVariables (for active
	  clock reduction)	
	
2003-06-13  Gerd Behrmann  <behrmann@cs.auc.dk>
  	* Updated README file changes in expression representation
	
2003-06-12  Gerd Behrmann  <behrmann@cs.auc.dk>
	* Fixed line counting bug
	* Added support for DOS style newlines

2003-06-05  Gerd Behrmann  <behrmann@cs.auc.dk>
	* Removed ::evaluate methods from TimedAutomataSystem (use
	  Interpreter class instead)
	* Updated SystemBuilder, TypeChecker and RangeChecker to use new
	  Interpreter class.
	* Changed ParserBuilder::property(...) to use a kind_t rather than
	  an int. 
	* Fixed a problem in how processes are instantiated. This required
	  the introduction of a new type 'INSTANCE', which is used for
	  instances of templates. This more closely resembles the
	  behaviour of 3.2. 
	* Added include of cstdarg and cassert header files
	* Added interpreter class used to interprete expressions.
	* Added interpreter class used to interprete expressions.
	* Added default constructor for range s.t. the range is
	  initialised to the empty range.
	* Added 'INSTANCE' base type
	* Removed ::getId() methods and id based constructors
	* Changed textual representation of an error to include the XPath
	  (in case of XML input files).
	* Made 'and', 'or', 'not', and 'imply' keywords available to
	  expressions used in the model.
	* Changed precedence of 'and', 'or', 'not, and 'imply' keywords to
	  be lower than the corresponding symbols (this matches the
	  behaviour of Perl which also has both symbolic operators and
	  keyword operators). 
	* Fixed several crasher bugs triggered by parse errors
	
2003-05-21  Gerd Behrmann  <behrmann@cs.auc.dk>
	* In TimedAutamataSystem; unified list of clocks, constants,
  	  channels, integer variables, and record variables into one list:
	  variables. 
	* Replaced varbase_t, clock_t and channel_t with variable_t
	* Implemented parameterized array sizes, i.e. the size of a local
	  array in a template can depend on a template parameter (this is
	  a 3.2 feature). 
	
2003-05-20  Gerd Behrmann  <behrmann@cs.auc.dk>
	* Disabled check for invariants on target of urgent and broadcast 
	  transitions since it would break many of our examples and would
	  not fix the problem anyway.
	* Moved construction of default initialiser out of libutap 
	* Integer types can now have parameterised ranges (like
	  in 3.2) 
	* Added a couple of additional checks for invalid initialisers 
	* Disallowed invariants on targets of edges synchronising on 
	  urgent channels or broadcast receiption
	* Empty invariants are now represented as empty expressions rather  
	  than the constant 1.
	* Changed ParserBuilder::procState to take an additional argument 
	  indicating whether the state has an invariant or not.
	* Added range_t::contains() method
	* Replaced constant_t with variable_t
	* RangeChecker is no longer a visitor - it simply serves as an
	  oracle to compute the range of an expression in a given
	  process. 
	* Added expression_t::equal method for comparing two expressions.
	
2003-05-01  Gerd Behrmann  <behrmann@cs.auc.dk>
	* Removed TimedAutomataStructure. This class was an early attempt
	  to avoid clutering the common namespace with structs like
	  state_t and process_t. Later we introduced the UTAP namespace,
	  thus TimedAutomataStructures is no longer needed.
	* Updated range checker to better handle constants and structures.
  	* Removed range information from 'location expressions', i.e. from 
	  expressions on the form P.l, where P is a process and l is a
	  location. 
  	* Made sure that the index of an array expression is within range
	  in evaluateExpression (actually, a range violation should
	  generate an error, but at the moment there is no way to report
	  this error; the fix is compatible with the behaviour of UPPAAL
	  [which is also broken...]).
  	* Replaced call to getRecordFields with getFrame (fixes an
	  assertion violation).
  	* Fixed bug in visitInstance which caused integer expressions to
	  be rejected as arguments to constant parameters.
	* Fixed problem in TimedAutomataSystem::evaluateExpression
	  introduced by the new expression implementation.

2003-04-30  Gerd Behrmann  <behrmann@cs.auc.dk>
	* Started implementation of RangeMap class to solve the problem
  	  with computing the range of record fields.
	* Replaced SubExpression and ExpressionProgram with new
	  expression_t class 
	* Updated libutap to use the new expression_t class
	* Notice: the type of an expression should never contain the range
	  of the expression; the range might depend on the context and
	  thus you should always use RangeChecker (an alternative would be
	  to let the range be defined by a pair of expressions instead of
	  constants; then the expression would include the references to
	  the constants the range depends on and would need to be
	  evaluated in the correct context - on the other hand, this is
	  exactly what RangeChecker does...). The old implementation
	  contained some bugs related to this - these have been fixed.
	* Notice that there is a problem related to record types in
	  RangeChecker::addRangeOfConstant (the problem is that records
	  are not handled :-).
	* Replaced most uses of the getId() methods of symbol_t and type_t
	  with actual references to the symbols and types (previously, a
	  number of maps and sets contained the ID of symbols and
	  types). Also, nodes of expressions previously refered to some
	  types and symbols by ID - this is no longer the case.
	* Removed then SYNC_TAU constant. A tau 'synchronisation' is now
	  'stored' as an emty sync expression in the transition.	

2003-04-22  Gerd Behrmann  <behrmann@cs.auc.dk>
	* Fixed bug in isReferenceTo for DOT expressions

2003-04-12  Gerd Behrmann  <behrmann@cs.auc.dk>
	* Fixed problem with utap_ prefix in libutap lexer when using a
	  recent version of flex.

2003-04-08  Gerd Behrmann  <behrmann@cs.auc.dk>
	* Made sure that yesterdays fix for 3.2 compatible integer
	  parameters also works for array parameters
	* Rated channel parameters according to capabilities, i.e. no
	  clock guards, clock guards on send, clock guards on both send
	  and receive. The argument must have at least the capabilities as
	  the parameter. E.g. it is ok to use a channel argument to an
	  urgent channel parameter, but not the other way arround.

2003-04-07  Gerd Behrmann  <behrmann@cs.auc.dk>
	* Removed SIDE_EFFECT_FREE type prefix
	* Changed handling of int parameters - a parameter were the range
	  is not specificed is now compatible with integer arguments with 
	  any range (this is ensures compatibility with 3.2)

2003-04-06  Gerd Behrmann  <behrmann@cs.auc.dk>

	* Fixed several crasher bugs related to the parser and
	  error recovery
	* Added const version of SubExpression::operator[]
	* Removed the code which converted constraints to the 
	  normal form (x-y<c) - also removed the CONSTRAINT 
	  operation.
	* Added flag to expressionToString which indicates whether
	  to use = or := as the assignment operator.
	* Reimplemented type and symbol handling. Three new classes
	  (frame_t, type_t and symbol_t) have repaced the TypeSystem
	  and SymbolTable classes.
	* Added doxygen support
	* Added support for the visitor pattern to TimedAutomataSystem
	* Replaced the old TypeChecker class with two new classes: The
	  SystemBuilder class is used for creating a TimedAutomataSystem
	  with minimal type checking. The TypeChecker class (which 
	  implements the visitor pattern) type checks an existing 
	  TimedAutomataSystem. The new type checker no longer copies
	  the template on template instantiation.
	* Moved range checking to new RangeChecker class
	* Added support for tracking the position of expression in the
	  input file.
	* Added ExpressionProgram::empty() method
	* Added SubExpression::getSymbol(), SubExpression::isReferenceTo(),
	  and SubExpression::changesVariables().
	* Unified handling of processes and structs
	* Added warning for updates on edges without any effect

2003-02-17  Gerd Behrmann  <behrmann@cs.auc.dk>

	* Enlarged "default domain" of a constant (since a constant is 
	  a normal integer, it has a domain)
	* Fixed problem with constant arguments to non-constant integer
	  reference parameters.
	* Fixed problem with array parameters
	* Fixed false assumption: Previously, the value of constants was
	  thought to be known. This is not always the case, since it might
	  depend on the parameters of a template. Values derived from such
	  constants are now disallowed in array sizes and integer ranges.
	* Fixed bug which caused some identifier expressions to be
	  marked as non-reference types.
	* Fixed bug in InternalBuilder which caused inline-ifs that mixed
          reference and non-reference types to fail
	* Fixed bug in InternalBuilder which caused a wrong offset to be
	  computed for constant arrays.
	* Fixed bug in range estimation for subtractions

2003-02-04  Gerd Behrmann  <behrmann@cs.auc.dk>

	* Added min and max operators
	* Added new array constructs to old syntax
	* Fixed memory allocation bugs
	* Moved declaration of assert into error.h and removed assert.h
	  (due to conflicts with the system assert.h)
        * Fixed validation problems when loading ta/xta files
	* Made type checker detect possible division by zero
	* Fixed problem with empty <instantiation> and <system> tags

2003-01-30  Gerd Behrmann  <behrmann@cs.auc.dk>

	* C++ compatibility fixes
	* Windows fixes

2003-01-28  Gerd Behrmann  <behrmann@cs.auc.dk>

	* Added support for +=, -=, etc.

2003-01-27  Gerd Behrmann  <behrmann@cs.auc.dk>

	* Added pre/post decrement/increment operators
	* Made := and = behave the same
	* Cleaned up use of type_t
	* Changed addState to addLocation
	* Fixed/cleaned up handling of arguments in function calls and
	  template instantiations.
	* Added check to make sure that arguments to templates are side 
	  effect free.

2003-01-24  Gerd Behrmann  <behrmann@cs.auc.dk>

	* Fixed more segfaults
	* Fixed bug in throw statement

2003-01-18  Gerd Behrmann  <behrmann@cs.auc.dk>

	* Fixed XPath construction

2003-01-17  Gerd Behrmann  <behrmann@cs.auc.dk>

	* Fixed segfault in case of missing initial state

2003-01-13  Gerd Behrmann  <behrmann@cs.auc.dk>

	* Fixed C++ compatibility issues

2003-01-04  Gerd Behrmann  <behrmann@cs.auc.dk>

	* Fixed position tracking
	* Reimplemented symbol table for speed
	* Implemented copy constructor for TypeSystem
	* Fixed error handling problem in XML parser

2003-12-27  Gerd Behrmann  <behrmann@cs.auc.dk>

	* Moved typecheck of assignment from procTransition() to
 	  procUpdate()
	* Added check for non-constant arguments to non-reference
	  paramters

2003-12-23  Gerd Behrmann  <behrmann@cs.auc.dk>

	* Fixed lexer problem with 'broadcast' keyword
	* Added check for clock guards on transitions with urgent or
	  broadcast synchronisations 
	* Added check for non-reference clock and channel parameters

2002-12-20  Gerd Behrmann  <behrmann@cs.auc.dk>

	* Initial release

	